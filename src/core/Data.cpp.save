#include <boost/math/special_functions/round.hpp>

#include "Data.hpp"


namespace RGM
{

using namespace std;


// ----- Object -----

Object::Object() :
    pose_(UNSPECIFIED), truncated_(false), difficult_(false), dataId_(-1)
{
}

Object::Object(Pose pose, bool truncated, bool difficult, bool flip, Rectangle2i & bndbox, int dataId) :
    pose_(pose), truncated_(truncated), difficult_(difficult), bndbox_(bndbox), dataId_(dataId)
{
}

Object::Pose Object::pose() const
{
    return pose_;
}

Object::Pose & Object::getPose()
{
    return pose_;
}

bool Object::truncated() const
{
    return truncated_;
}

bool & Object::getTruncated()
{
    return truncated_;
}

bool Object::difficult() const
{
    return difficult_;
}

bool & Object::getDifficult()
{
    return difficult_;
}

const Rectangle2i & Object::bndbox() const
{
    return bndbox_;
}

Rectangle2i & Object::getBndbox()
{
    return bndbox_;
}

int Object::dataId() const
{
    return dataId_;
}

int & Object::getDataId()
{
    return dataId_;
}

bool Object::empty() const
{
    return (pose() == UNSPECIFIED) && !truncated() && !difficult() && bndbox().empty() && (dataId()==-1);
}

template<class Archive>
void Object::serialize(Archive & ar, const unsigned int version)
{
    ar & BOOST_SERIALIZATION_NVP(pose_);
    ar & BOOST_SERIALIZATION_NVP(truncated_);
    ar & difficult_;
    ar & bndbox_;
    ar & dataId_;
}



// ----- PosData -----

PosData::PosData() :
    imgFile_("UNKNOWN"), objName_("UNKNOWN"), flip_(false), maxArea_(0)
{
}

const std::string & PosData::imgFile() const
{
    return imgFile_;
}

std::string & PosData::getImgFile()
{
    return imgFile_;
}
const std::string & PosData::objName() const
{
    return objName_;
}

std::string & PosData::getObjName()
{
    return objName_;
}

const std::vector<Object> & PosData::objects() const
{
    return objects_;
}

std::vector<Object> & PosData::getObjects()
{
    return objects_;
}

bool    PosData::flip() const
{
    return flip_;
}

bool &  PosData::getFlip()
{
    return flip_;
}

int   PosData::maxArea() const
{
    return maxArea_;
}

int & PosData::getMaxArea()
{
    return maxArea_;
}

std::pair<cv::Mat, cv::Mat> PosData::cropObjectPatch(int objIdx, int cellSize, int wd, int ht, bool padding) const
{
    cv::Mat img;

    if (objIdx < 0 || objIdx >= objects().size() ) {
        std::cerr << "Wrong object index" << std::endl;
        return std::make_pair(img, img);
    }

    int pixelWd = cellSize * wd;
    int pixelHt = cellSize * ht;

    int cropHt =  padding ? (cellSize * (ht+2)) : pixelHt;
    int cropWd =  padding ? (cellSize * (wd+2)) : pixelWd;
    cv::Size cropSz(cropWd, cropHt);

    #pragma omp critical
    {
        img = cv::imread(imgFile(), cv::IMREAD_COLOR);
    }

    if (flip()) {
        cv::flip(img, img, 1);
    }

    const Object & obj(objects()[objIdx]);

    int bbHt = obj.bndbox().height();
    int bbWd = obj.bndbox().width();

    int pady = padding ? boost::math::round((float)cellSize * bbHt / pixelHt) : 0;
    int padx = padding ? boost::math::round((float)cellSize * bbWd / pixelWd) : 0;

    int x1 = obj.bndbox().x()      - padx;
    int x2 = obj.bndbox().right()  + padx;
    int y1 = obj.bndbox().y()      - pady;
    int y2 = obj.bndbox().bottom() + pady;

    cv::Mat roi(y2-y1+1, x2-x1+1, img.type(), cv::Scalar::all(0));

    for ( int y=y1; y<y2; ++y ) {
        int yy = std::min<int>(img.rows-1, std::max<int>(0, y));
        for ( int x=x1; x<x2; ++x ) {
            int xx = std::min<int>(img.cols-1, std::max<int>(0, x));

            roi.at<cv::Vec3b>(y-y1, x-x1) = img.at<cv::Vec3b>(yy, xx);
        }
    }

    cv::resize(roi, img, cropSz, 0, 0, cv::INTER_LINEAR);

    return std::make_pair(img, roi);
}

cv::Mat PosData::getCropImg(std::vector<Rectangle2i> & cropBoxes) const
{
    cv::Mat img;
    #pragma omp critical
    {
        img = cv::imread(imgFile_, cv::IMREAD_COLOR);
    }

    if ( flip_ ) {
        cv::flip(img, img, 1);
    }

    cropBoxes.clear();
    cropBoxes.push_back(objects()[0].bndbox());

    int x1 = objects()[0].bndbox().x();
    int x2 = objects()[0].bndbox().right();
    int y1 = objects()[0].bndbox().y();
    int y2 = objects()[0].bndbox().bottom();
    int ht = objects()[0].bndbox().height();
    int wd = objects()[0].bndbox().width();
    for ( int i=1; i<objects().size(); ++i ) {
        x1 = std::min<int>(x1, objects()[i].bndbox().x());
        x2 = std::max<int>(x2, objects()[i].bndbox().right());
        y1 = std::min<int>(y1, objects()[i].bndbox().y());
        y2 = std::max<int>(y2, objects()[i].bndbox().bottom());

        ht = std::max<int>(ht, objects()[i].bndbox().height());
        wd = std::max<int>(wd, objects()[i].bndbox().width());

        cropBoxes.push_back(objects()[i].bndbox());
    }

    const float alpha = 0.5F;
    int padx = boost::math::round(wd * alpha);
    int pady = boost::math::round(ht * alpha);

    cv::Rect roi;

    roi.x = std::max<int>(0, x1 - padx);
    roi.y = std::max<int>(0, y1 - pady);
    roi.width = std::min<int>(img.cols, x2 + padx) - roi.x;
    roi.height = std::min<int>(img.rows, y2 + pady) - roi.y;

    cv::Mat cropImg = img(roi).clone();

    for ( int i=0; i<cropBoxes.size(); ++i ) {
        cropBoxes[i].setX(cropBoxes[i].x() - roi.x);
        cropBoxes[i].setY(cropBoxes[i].y() - roi.y);
    }

    return cropImg;
}

void PosData::getPosData(const std::vector<PosData> & pos, std::vector<std::pair<int, int> > & idx,
                         int minSz, std::vector<PosData> & usedPos)
{
    int num = idx.size();

    usedPos.clear();

    for ( int i = 0; i < num; ++i ) {
        int dataIdx = idx[i].first;
        int objIdx = idx[i].second;

        PosData d;
        d.getImgFile() = pos[dataIdx].imgFile();
        d.getObjName() = pos[dataIdx].objName();
        d.getFlip() = pos[dataIdx].flip();
        d.getMaxArea() = pos[dataIdx].objects()[objIdx].bndbox().area();

        if ( pos[dataIdx].objects()[objIdx].bndbox().area() < minSz ) {
            continue;
        }

        d.getObjects().push_back(pos[dataIdx].objects()[objIdx]);
        d.getMaxArea() = pos[dataIdx].objects()[objIdx].bndbox().area();

        usedPos.push_back(d);

    } // for i


    //std::sort(idx.begin(), idx.end());

    //int dataIdx = idx[0].first;
    //
    //std::vector<int> boxIdx;
    //boxIdx.push_back(idx[0].second);

    //for ( int i = 1; i < num; ++i ) {
    //	if ( idx[i].first == dataIdx ) {
    //		boxIdx.push_back(idx[i].second);
    //	} else {
    //		PosData d;
    //		d.getImgFile() = pos[dataIdx].imgFile();
    //		d.getObjName() = pos[dataIdx].objName();
    //		d.getFlip() = pos[dataIdx].flip();
    //		d.getMaxArea() = 0;
    //		for ( int j = 0; j < boxIdx.size(); ++j ) {
    //			if ( pos[dataIdx].objects()[boxIdx[j]].bndbox().area() < minSz )
    //				continue;
    //			d.getObjects().push_back(pos[dataIdx].objects()[boxIdx[j]]);
    //			d.getMaxArea() = std::max(d.maxArea(), d.getObjects().back().bndbox().area());
    //		}// for j

    //		if ( d.objects().size() > 0 )
    //			usedPos.push_back(d);

    //		dataIdx = idx[i].first;
    //		boxIdx.clear();
    //		boxIdx.push_back(idx[i].second);
    //	}
    //} // for i
}

template<class Archive>
void PosData::serialize(Archive & ar, const unsigned int version)
{
    ar & imgFile_;
    ar & objName_;
    ar & objects_;
    ar & flip_;
    ar & maxArea_;
}



// ----- NegData -----

NegData::NegData() :
    imgFile_("UNKNOWN"), flip_(false), dataId_(-1)
{
}

cv::Mat NegData::getImg() const
{
    cv::Mat img = cv::imread(imgFile(), cv::IMREAD_COLOR);
    if ( flip() ) {
        cv::flip(img, img, 1);
    }

    return img;
}

const std::string & NegData::imgFile() const
{
    return imgFile_;
}

std::string & NegData::getImgFile()
{
    return imgFile_;
}

bool   NegData::flip() const
{
    return flip_;
}

bool & NegData::getFlip()
{
    return flip_;
}

int   NegData::dataId() const
{
    return dataId_;
}

int & NegData::getDataId()
{
    return dataId_;
}

template<class Archive>
void NegData::serialize(Archive & ar, const unsigned int version)
{
    ar & imgFile_;
    ar & flip_;
    ar & dataId_;
}


} // namespace RGM
