#ifndef RGM_UTILSERIALIZATION_HPP_
#define RGM_UTILSERIALIZATION_HPP_

#include "Common.hpp"


namespace boost
{
namespace serialization
{
/// Eigen::Array
template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void save(Archive & ar, const Eigen::Array<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    int rows=m.rows(),cols=m.cols();
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);
    ar & boost::serialization::make_array(m.data(), rows*cols);
}

template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void load(Archive & ar, Eigen::Array<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    int rows,cols;
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);
    m.resize(rows,cols);
    ar & boost::serialization::make_array(m.data(), rows*cols);
}

template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void serialize(Archive & ar, Eigen::Array<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    split_free(ar,m,version);
}

///  Eigen::Matrix
template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void save(Archive & ar, const Eigen::Matrix<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    int rows=m.rows(),cols=m.cols();
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);
    ar & boost::serialization::make_array(m.data(), rows*cols);
}

template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void load(Archive & ar, Eigen::Matrix<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    int rows,cols;
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);
    m.resize(rows,cols);
    ar & boost::serialization::make_array(m.data(), rows*cols);
}

template <class Archive, typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void serialize(Archive & ar, Eigen::Matrix<_Scalar,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    split_free(ar,m,version);
}

///  Eigen::Matrix of Eigen::Array
template <class Archive, typename _Scalar, int _Rows0, int _Cols0, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void save(Archive & ar, const Eigen::Matrix<Eigen::Array<_Scalar, _Rows0, _Cols0>,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    int rows=m.rows(),cols=m.cols();
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);

    int rows0 = 0, cols0 = 0;
    if ( rows > 0 && cols > 0 ) {
        rows0 = m(0, 0).rows();
        cols0 = m(0, 0).cols();
    }
    ar & BOOST_SERIALIZATION_NVP(rows0);
    ar & BOOST_SERIALIZATION_NVP(cols0);

    for ( int i = 0; i < rows; ++i ) {
        ar & boost::serialization::make_array(m.row(i).data(), cols * rows0 * cols0);
    }

}

template <class Archive, typename _Scalar, int _Rows0, int _Cols0, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void load(Archive & ar, Eigen::Matrix<Eigen::Array<_Scalar, _Rows0, _Cols0>,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    typedef typename Eigen::Array<_Scalar, _Rows0, _Cols0> Cell;
    typedef typename Eigen::Matrix<Cell,_Rows,_Cols,_Options,_MaxRows,_MaxCols> Matrix;

    int rows,cols;
    int rows0, cols0;
    ar & BOOST_SERIALIZATION_NVP(rows);
    ar & BOOST_SERIALIZATION_NVP(cols);
    ar & BOOST_SERIALIZATION_NVP(rows0);
    ar & BOOST_SERIALIZATION_NVP(cols0);
    
    assert(rows0 == _Rows0 && cols0 == _Col);
    
    m = Matrix::Constant(rows, cols, Cell::Zero());

    for ( int i = 0; i < rows; ++i ) {
        ar & boost::serialization::make_array(m.row(i).data(), cols * rows0 * cols0);
    }
}

template <class Archive, typename _Scalar, int _Rows0, int _Cols0, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
void serialize(Archive & ar, Eigen::Matrix<Eigen::Array<_Scalar, _Rows0, _Cols0>,_Rows,_Cols,_Options,_MaxRows,_MaxCols> & m, const unsigned int version)
{
    split_free(ar,m,version);
}


} // namespace serialziation
} // namespace boost

#endif // RGM_UTILSERIALIZATION_HPP_
